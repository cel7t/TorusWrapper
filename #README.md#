# Torus Wrapper
## What is it?
Torus Wrapper is a project that helps you find the largest rectangle inside a transparent png and wraps the png around it. It's useful for creating tiling patterns with images.
BoundingRect.py and bounding-rect.lisp provide two different strategies for the same, implemented in Python and Lisp respectively.
## Examples
### tea.png
#### Source
#+html: <p align="center"><img src="images/tea.png" /></p>
#### Resulting tile
#+html: <p align="center"><img src="images/tea_tile.png" /></p>
#### What it looks like tiled
#+html: <p align="center"><img src="images/tea_tile_result.png" /></p>
### roman.png
#### Source
#+html: <p align="center"><img src="images/roman.png" /></p>
#### Resulting tile
#+html: <p align="center"><img src="images/roman_tile.png" /></p>
#### What it looks like tiled
#+html: <p align="center"><img src="images/roman_tile_result.png" /></p>
### sus.png
#### Source
#+html: <p align="center"><img src="images/sus.png" /></p>
#### Resulting tile
#+html: <p align="center"><img src="images/sus_tile.png" /></p>
#### What it looks like tiled
#+html: <p align="center"><img src="images/sus_tile_result.png" /></p>
## How does it work?
### BoundingRect.py
BoundingRect.py uses a dynamic programming approach to finding the biggest rectangle inside a given transparent png file.
It then overlays parts of the image outside the rectangle onto the rectangle itself to create a smart tiling pattern.
This approach ignores holes inside the shape itself to make the process a lot faster.
- Libraries Used: PIL
### bounding-rect.lisp
bounding-rect.lisp calculates the maximum rectangle at each pixel.
This, while sacrificing speed, takes into account any holes within the image.
It uses the same method as BoundingRect.py to overlay extremities into the biggest rectangle itself.
- Libraries Used: Imago
## License and Copyright
The code in this repository is made available under GPLv2 only.
Â© Sarthak Shah 2023
